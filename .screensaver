# Screensaver configuration
SCREENSAVER_TIMEOUT=600  # 10 minutes in seconds
SCREENSAVER_ENABLED=true

# Internal variables
SCREENSAVER_ACTIVE=false

# Set TMOUT to match the desired screensaver duration
TMOUT=$SCREENSAVER_TIMEOUT

TRAPALRM() {
    # This function executes when Zsh is idle for $TMOUT seconds.
    
    # Only run if the screensaver is not currently active
    if [[ $SCREENSAVER_ENABLED == "true" ]] && [[ $SCREENSAVER_ACTIVE == "false" ]]; then
        SCREENSAVER_ACTIVE=true
                
        # Trigger the screensaver display function
        show_gif_overlay || show_banner_overlay || show_fancy_overlay || exit 1
    fi
}

# Alternative: GIF overlay
show_gif_overlay() {

    local gifs=(
        "https://tenor.com/view/hacker-hacker-man-hacking-hackers-hack-gif-23864910"
        "https://tenor.com/view/hacker-man-hacker-neon-ps4-glitched-gif-20054441"
        "https://tenor.com/view/lets-go-johnny-silverhand-keanu-reeves-cyberpunk2077-shades-off-gif-26950453"
        "https://tenor.com/view/pokemon-fire-red-leaf-green-remake-snorlax-gif-23083502"
        "https://tenor.com/view/lr-teq-vegeta-giant-ape-furious-last-resort-overwhelming-combat-final-bullet-attack-hyper-explosive-wave-gif-5882373243771434785"
        "https://tenor.com/view/star-wars-star-wars-episode-v-darth-vader-luke-skywalker-fighting-with-light-sabers-gif-11534021580856389985"
        "https://tenor.com/view/warhammer-40k-space-marine-helmet-warhammer-40k-space-marine-astartes-spacem-arine-armor-gif-9266730404172402530"
    )

    stdbuf -o0 printf '\033[?1049h\033[s\033[?25l\033[2J\033[H\r\n'

    # Get size of array and a random index
    local size=${#gifs}
    local index=$(( (RANDOM % size) + 1 ))
    local random_gif=${gifs[$index]}

    # Calculate smaller dimensions to prevent flicker
    local rows=$(( $(tput lines) - 4 ))  # Leave space for message
    local cols=$(( $(tput cols) - 4 ))   # Leave margins
        
    # Ensure minimum dimensions
    (( rows < 10 )) && rows=10
    (( cols < 20 )) && cols=20

    # Show instruction at bottom
    local lines=$(tput lines)
    stdbuf -o0 printf '\033[%d;1H\033[44m\033[97m' $((lines - 1))

    echo " Press Ctrl+C to exit screensaver... "
    stdbuf -o0 printf '\033[0m'

    # Move cursor to a safe position to run gif-for-cli in foreground
    stdbuf -o0 printf '\033[2;1H'

    # Save terminal settings
    local original_stty
    original_stty=$(stty -g)

    # Configure terminal to ignore regular keypresses
    stty intr ^C
    stty -echo -icanon
    stty susp undef quit undef eof undef

    # Show random GIF from list
    gif-for-cli -m truecolor "$random_gif" --rows $rows --cols $cols -l 0
    local gif_pid=$!

    # Restore terminal settings
    stty "$original_stty"

    # Kill the gif process
    kill $gif_pid 2>/dev/null
    wait $gif_pid 2>/dev/null  # Clean up zombie process
    
    # Restore original screen content
    stdbuf -o0 printf '\033[?1049l'
    
    # Restore cursor and show it
    stdbuf -o0 printf '\033[u\033[?25h'

}

# Alternative: More visual overlay with border
show_fancy_overlay() {
    # Save cursor and hide it
    stdbuf -o0 printf '\033[s\033[?25l'
    
    # Get terminal dimensions
    local lines=$(tput lines)
    local cols=$(tput cols)
    
    # Calculate center position
    local center_line=$((lines / 2 - 3))
    local center_col=$((cols / 2 - 20))
    
    # Save current screen content (alternative buffer)
    stdbuf -o0 printf '\033[?1049h'
    
    # Clear and create overlay
    stdbuf -o0 printf '\033[2J\033[H'
    
    # Semi-transparent dark background
    for ((i=1; i<=lines; i++)); do
        stdbuf -o0 printf '\033[%d;1H\033[48;5;236m%*s\033[0m\n' $i $cols ""
    done
    
    # Create message box in center
    local box_start=$((center_line - 2))
    stdbuf -o0 printf '\033[%d;%dH\033[48;5;240m\033[97m╔═══════════════════════════════════════╗\033[0m' $((box_start++)) $center_col
    stdbuf -o0 printf '\033[%d;%dH\033[48;5;240m\033[97m║              💤  SCREENSAVER          ║\033[0m' $((box_start++)) $center_col
    stdbuf -o0 printf '\033[%d;%dH\033[48;5;240m\033[97m║          Where are you?               ║\033[0m' $((box_start++)) $center_col
    stdbuf -o0 printf '\033[%d;%dH\033[48;5;240m\033[97m║      Press any key to continue        ║\033[0m' $((box_start++)) $center_col
    stdbuf -o0 printf '\033[%d;%dH\033[48;5;240m\033[97m╚═══════════════════════════════════════╝\033[0m' $((box_start++)) $center_col
    
    # Wait for any key
    read -s -k
    
    # Restore original screen content
    stdbuf -o0 printf '\033[?1049l'
    
    # Restore cursor and show it
    stdbuf -o0 printf '\033[u\033[?25h'
}

# Simple banner overlay (least intrusive)
show_banner_overlay() {
    stdbuf -o0 printf '\033[s\033[?25l'  # Save cursor, hide it
    
    # Move to top and create a banner
    stdbuf -o0 printf '\033[H\033[41m\033[97m'  # Red background, white text
    echo " 💤 SCREENSAVER - Where are you? Press any key to continue... "
    stdbuf -o0 printf '\033[0m'  # Reset colors
    
    # Move back to original position
    stdbuf -o0 printf '\033[u'
    
    # Wait for any key
    read -s -k
    
    # Clear the banner by overwriting with spaces
    stdbuf -o0 printf '\033[s\033[H'
    stdbuf -o0 printf '%*s' $(tput cols)  # Fill line with spaces
    stdbuf -o0 printf '\033[u\033[?25h'   # Restore cursor and show it
}

# Function to update activity timestamp
update_activity() {
    if [[ $SCREENSAVER_ACTIVE == "true" ]]; then
        SCREENSAVER_ACTIVE=false
        zle && zle reset-prompt
    fi
}

# Track terminal activity - keep these for activity tracking
zle-keymap-select() {
    update_activity
}

zle-line-init() {
    update_activity
}

zle -N zle-keymap-select
zle -N zle-line-init

# Control functions
screensaver_disable() { SCREENSAVER_ENABLED=false; echo "Screensaver disabled" }
screensaver_enable() { SCREENSAVER_ENABLED=true; update_activity; echo "Screensaver enabled" }
screensaver_test() { 
    # Simulate TMOUT expiration by calling TRAPALRM directly
    TRAPALRM
}

alias ss-off='screensaver_disable'
alias ss-on='screensaver_enable'
alias ss-test='screensaver_test'